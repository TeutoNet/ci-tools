#!/usr/bin/env python3

import sys
from base64 import b64decode, b64encode
from yaml import safe_load, dump
from subprocess import run

# file to work on
tmppath = sys.argv[-1]


with open(tmppath, 'r') as tmpfile:
    content_original = tmpfile.read()

def decode():
    y = safe_load(read_tmpfile())
    for key in y['data']:
        y['data'][key] = b64decode(y['data'][key]).decode()
    with open(tmppath, 'w') as tmpfile:
        dump(y, tmpfile, default_flow_style=False)

def encode():
    y = safe_load(read_tmpfile())
    for key in y['data']:
        y['data'][key] = b64encode(y['data'][key].encode()).decode()
    with open(tmppath, 'w') as tmpfile:
        dump(y, tmpfile, default_flow_style=False)

def read_tmpfile():
    with open(tmppath, 'r') as tmpfile:
        return tmpfile.read()

def write_tmpfile(content):
    with open(tmppath, 'w') as tmpfile:
        return tmpfile.write(content)

def print_usage():
    print(f'Usage: {sys.argv[0]} [editor with args] file')
    print(f'       {sys.argv[0]} -d file')
    print(f'       {sys.argv[0]} -e file')


if len(sys.argv) < 2:
    print_usage()
elif len(sys.argv) == 3 and sys.argv[1] == '-d':
    decode()
elif len(sys.argv) == 3 and sys.argv[1] == '-e':
    encode()
else:
    # use explicit editor or vi
    editor = sys.argv[1:]
    if len(editor) == 1:
        editor.insert(0, 'vi')

    content_original = read_tmpfile()
    decode()
    content_decoded = read_tmpfile()

    # edit
    run(editor)

    # encode / re-save original for SOPS unchanged file detection
    if content_decoded == read_tmpfile():
        write_tmpfile(content_original)
    else:
        encode()
